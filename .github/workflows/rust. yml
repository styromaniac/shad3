---
name: Rust CI and Publish

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: "always"
  RUST_BACKTRACE: "1"

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    name: Build
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        include:
          # Linux Builds
          - os: linux
            runs_on: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            os_name: linux
          - os: linux
            runs_on: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            os_name: linux
          # macOS Builds
          - os: macos
            runs_on: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            os_name: macos
          - os: macos
            runs_on: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            os_name: macos
          # Windows Builds
          - os: windows
            runs_on: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            os_name: windows
          - os: windows
            runs_on: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
            os_name: windows
          # Termux (Android) Builds
          - os: linux
            runs_on: ubuntu-latest
            arch: aarch64
            target: aarch64-linux-android
            os_name: termux
          - os: linux
            runs_on: ubuntu-latest
            arch: x86_64
            target: x86_64-linux-android
            os_name: termux
    steps:
      - uses: actions/checkout@v4

      - name: Cache NDK for Termux
        if: >
          matrix.os == 'linux' &&
          (matrix.target == 'aarch64-linux-android' ||
           matrix.target == 'x86_64-linux-android')
        uses: actions/cache@v3
        with:
          path: $HOME/android-ndk-r25b
          key: ${{ runner.os }}-ndk-${{ hashFiles('**/android-ndk-r25b-linux.zip') }}
          restore-keys: |
            ${{ runner.os }}-ndk-

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install Android NDK for Termux
        if: >
          matrix.os == 'linux' &&
          (matrix.target == 'aarch64-linux-android' ||
           matrix.target == 'x86_64-linux-android')
        run: |
          if [ ! -d "$HOME/android-ndk-r25b" ]; then
            sudo apt-get update
            sudo apt-get install -y wget unzip
            wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
            unzip android-ndk-r25b-linux.zip -d $HOME/
          fi
          export ANDROID_NDK_HOME="$HOME/android-ndk-r25b"
          export PATH="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

      - name: Build with Cargo
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ 
            matrix.os == 'linux' &&
            matrix.arch == 'aarch64' &&
            matrix.target != 'aarch64-linux-android' &&
            matrix.target != 'x86_64-linux-android' 
          }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          TARGET_DIR="target/${{ matrix.target }}/release"
          if [[ "${{ matrix.target }}" == "aarch64-linux-android" || \
                "${{ matrix.target }}" == "x86_64-linux-android" ]]; then
            BIN_FILE="shad3"
            ARTIFACT_NAME="shad3-${{ matrix.os_name }}-${{ matrix.arch }}.tar.gz"
            tar -czf "artifacts/${ARTIFACT_NAME}" -C "$TARGET_DIR" "$BIN_FILE"
          elif [[ "${{ matrix.os }}" == "windows" ]]; then
            EXE_FILE="shad3.exe"
            ARTIFACT_NAME="shad3-${{ matrix.os_name }}-${{ matrix.arch }}.zip"
            zip "artifacts/${ARTIFACT_NAME}" "$TARGET_DIR/$EXE_FILE"
          else
            BIN_FILE="shad3"
            ARTIFACT_NAME="shad3-${{ matrix.os_name }}-${{ matrix.arch }}.tar.gz"
            tar -czf "artifacts/${ARTIFACT_NAME}" -C "$TARGET_DIR" "$BIN_FILE"
          fi

      - name: List release directory
        run: ls -la target/${{ matrix.target }}/release

      - uses: actions/upload-artifact@v4
        with:
          name: shad3-${{ matrix.os_name }}-${{ matrix.arch }}
          path: artifacts/*

  publish:
    name: Publish
    needs: [check, test, fmt, clippy, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - run: cargo install cargo-edit

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | \
            sed -E 's/version = "(.*)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag "v${{ steps.get_version.outputs.VERSION }}"
          git push origin "v${{ steps.get_version.outputs.VERSION }}"

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish

      - name: Verify published version
        run: |
          sleep 15
          SEARCH_RESULT=$(cargo search shad3 --limit 1)
          PUBLISHED_VERSION=$(echo "$SEARCH_RESULT" | \
            sed -nE 's/^[^"]*"//; s/".*//p')
          if [[ "$PUBLISHED_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]]; then
            echo "Version mismatch" && exit 1
          fi

      - name: Download shad3-linux-x86_64
        uses: actions/download-artifact@v4
        with:
          name: shad3-linux-x86_64
          path: artifacts

      - name: Download shad3-linux-aarch64
        uses: actions/download-artifact@v4
        with:
          name: shad3-linux-aarch64
          path: artifacts

      - name: Download shad3-macos-x86_64
        uses: actions/download-artifact@v4
        with:
          name: shad3-macos-x86_64
          path: artifacts

      - name: Download shad3-macos-aarch64
        uses: actions/download-artifact@v4
        with:
          name: shad3-macos-aarch64
          path: artifacts

      - name: Download shad3-windows-x86_64
        uses: actions/download-artifact@v4
        with:
          name: shad3-windows-x86_64
          path: artifacts

      - name: Download shad3-windows-aarch64
        uses: actions/download-artifact@v4
        with:
          name: shad3-windows-aarch64
          path: artifacts

      - name: Download shad3-termux-aarch64
        uses: actions/download-artifact@v4
        with:
          name: shad3-termux-aarch64
          path: artifacts

      - name: Download shad3-termux-x86_64
        uses: actions/download-artifact@v4
        with:
          name: shad3-termux-x86_64
          path: artifacts

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="v${{ steps.get_version.outputs.VERSION }}"
          NOTES="Release $VERSION"
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes "$NOTES" \
            artifacts/*.tar.gz artifacts/*.zip

  lint:
    name: Lint YAML
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

      - name: Lint YAML
        run: yamllint .github/workflows/rust.yml
