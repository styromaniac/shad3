---
name: Rust CI

on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run Cargo Update
        run: cargo update
      - name: Check for Changes in Cargo.lock
        run: |
          if git diff --quiet Cargo.lock; then
            echo "No dependency updates found."
            exit 0
          else
            echo "Dependencies updated."
          fi
      - name: Commit and Push Dependency Updates
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git add Cargo.lock
          git commit -m "Update dependencies"
          git push origin ${{ github.ref }}

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --emit files
      - name: Commit and Push Formatting Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git commit -am "Apply rustfmt fixes" || echo "No formatting fixes needed"
          git push origin ${{ github.ref }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --fix --allow-dirty
      - name: Commit and Push Lint Fixes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git commit -am "Apply clippy fixes" || echo "No linting fixes needed"
          git push origin ${{ github.ref }}

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, aarch64]
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-linux-android
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-linux-android
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install Cross (for cross-compilation)
        if: |
          endsWith(matrix.target, 'linux-android') || (matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64')
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build with Cargo or Cross
        run: |
          if [[ "${{ endsWith(matrix.target, 'linux-android') || (matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64') }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }} --bin shad3
          else
            cargo build --release --target ${{ matrix.target }} --bin shad3
          fi

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          TARGET_DIR="target/${{ matrix.target }}/release"
          if [[ "${{ matrix.target }}" == *"linux-android" ]]; then
            BIN_FILE="shad3"
            ARCHIVE_NAME="shad3-termux_${{ matrix.arch }}.zip"
            cp "$TARGET_DIR/$BIN_FILE" "artifacts/$BIN_FILE"
            cd artifacts
            zip "$ARCHIVE_NAME" "$BIN_FILE"
            cd ..
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            BIN_FILE="shad3"
            ARCHIVE_NAME="shad3-linux_${{ matrix.arch }}.tar.gz"
            cp "$TARGET_DIR/$BIN_FILE" "artifacts/$BIN_FILE"
            tar -czf "artifacts/$ARCHIVE_NAME" -C artifacts $BIN_FILE
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            BIN_FILE="shad3"
            ARCHIVE_NAME="shad3-macos_${{ matrix.arch }}.tar.gz"
            cp "$TARGET_DIR/$BIN_FILE" "artifacts/$BIN_FILE"
            tar -czf "artifacts/$ARCHIVE_NAME" -C artifacts $BIN_FILE
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXE_FILE="shad3.exe"
            ARCHIVE_NAME="shad3-windows_${{ matrix.arch }}.zip"
            cp "$TARGET_DIR\\$EXE_FILE" "artifacts\\$EXE_FILE"
            cd artifacts
            zip "$ARCHIVE_NAME" "$EXE_FILE"
            cd ..
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: shad3-${{ matrix.os }}_${{ matrix.arch }}
          path: artifacts/*

  publish:
    name: Publish
    needs: [update-dependencies, check, test, fmt, clippy, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: cargo install cargo-edit
      - name: Set version to current date
        id: set_version
        run: |
          DATE_VERSION=$(date +%Y.%m.%d)
          cargo set-version $DATE_VERSION
          echo "VERSION=${DATE_VERSION}" >> $GITHUB_ENV
      - name: Commit and Push Updated Cargo.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add Cargo.toml
          git commit -m "Update version to $VERSION"
          git push origin ${{ github.ref }}
      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag "v${VERSION}"
          git push origin "v${VERSION}"
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish
      - name: Verify published version
        run: |
          sleep 15
          SEARCH_RESULT=$(cargo search shad3 --limit 1)
          PUBLISHED_VERSION=$(echo "$SEARCH_RESULT" | sed -nE 's/^[^"]*"//; s/".*//p')
          if [[ "$PUBLISHED_VERSION" != "${VERSION}" ]]; then
            echo "Version mismatch" && exit 1
          fi
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: shad3-*
          path: artifacts
          merge: true
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "Release v${VERSION}" \
            artifacts/*.tar.gz artifacts/*.zip
