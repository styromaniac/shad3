---
name: Dependency Update

on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run Cargo Update
        run: cargo update
      - name: Check for Changes in Cargo.lock
        run: |
          if git diff --quiet Cargo.lock; then
            echo "No dependency updates found."
            exit 0
          else
            echo "Dependencies updated."
          fi
      - name: Commit and Push Dependency Updates
        if: success()  # Runs only if changes are detected
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git add Cargo.lock
          git commit -m "Update dependencies"
          git push origin ${{ github.ref }}

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --emit files
      - name: Commit and Push Formatting Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git commit -am "Apply rustfmt fixes" || echo "No formatting fixes needed"
          git push origin ${{ github.ref }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --fix --allow-dirty
      - name: Commit and Push Lint Fixes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git commit -am "Apply clippy fixes" || echo "No linting fixes needed"
          git push origin ${{ github.ref }}

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, aarch64]
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: >-
            ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64' }}
          command: build
          args: >-
            --release
            --target ${{ matrix.target }}
            --bin shad3
      - name: Prepare artifacts
        shell: pwsh
        run: |
          New-Item -Path artifacts -ItemType Directory -Force
          $TARGET_DIR = "target/${{ matrix.target }}/release"
          $OS = if ("${{ matrix.os }}" -eq "ubuntu-latest") { "linux" } `
                elseif ("${{ matrix.os }}" -eq "macos-latest") { "macos" } `
                else { "windows" }
          if ($OS -eq "windows") {
            $EXE_FILE = "shad3.exe"
            $ARTIFACT_NAME = "shad3.exe"
            $ARCHIVE_NAME = "shad3-${OS}_${{ matrix.arch }}.zip"
            Copy-Item "$TARGET_DIR\$EXE_FILE" "artifacts\$ARTIFACT_NAME"
            Compress-Archive -Path "artifacts\$ARTIFACT_NAME" `
              -DestinationPath "artifacts\$ARCHIVE_NAME"
          } else {
            $BIN_FILE = "shad3"
            $ARTIFACT_NAME = "shad3"
            $ARCHIVE_NAME = "shad3-${OS}_${{ matrix.arch }}.tar.gz"
            Copy-Item "$TARGET_DIR/$BIN_FILE" "artifacts/$ARTIFACT_NAME"
            tar -czf "artifacts/$ARCHIVE_NAME" -C artifacts $ARTIFACT_NAME
          }
      - uses: actions/upload-artifact@v4
        with:
          name: shad3-${{ matrix.os }}_${{ matrix.arch }}
          path: artifacts/*

  publish:
    name: Publish
    needs: [update-dependencies, check, test, fmt, clippy, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: cargo install cargo-edit
      - name: Get current version
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | \
            sed -E 's/version = "(.*)"/\1/')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish
      - name: Verify published version
        run: |
          sleep 15
          SEARCH_RESULT=$(cargo search shad3 --limit 1)
          PUBLISHED_VERSION=$(echo "$SEARCH_RESULT" | \
            sed -nE 's/^[^"]*"//; s/".*//p')
          if [[ "$PUBLISHED_VERSION" != "${VERSION}" ]]; then
            echo "Version mismatch" && exit 1
          fi
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: shad3-*
          path: artifacts
          merge-multiple: true
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "Release v${VERSION}" \
            artifacts/*.tar.gz artifacts/*.zip
