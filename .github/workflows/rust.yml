---
name: Rust CI and Publish

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, aarch64]
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: >-
            ${{ matrix.os == 'ubuntu-latest' &&
               matrix.arch == 'aarch64' }}
          command: build
          args: >-
            --release
            --target ${{ matrix.target }}
            --bin SHAD3
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          TARGET_DIR="target/${{ matrix.target }}/release"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXE_FILE="SHAD3.exe"
            PDB_FILE="SHAD3.pdb"
            ARTIFACT_NAME_EXE="SHAD3-${{ matrix.os }}_${{ matrix.arch }}.exe"
            ARTIFACT_NAME_PDB="SHAD3-${{ matrix.os }}_${{ matrix.arch }}.pdb"
            cp "$TARGET_DIR/$EXE_FILE" "artifacts/$ARTIFACT_NAME_EXE"
            cp "$TARGET_DIR/$PDB_FILE" "artifacts/$ARTIFACT_NAME_PDB"
          else
            BIN_FILE="SHAD3"
            ARTIFACT_NAME="SHAD3-${{ matrix.os }}_${{ matrix.arch }}"
            cp "$TARGET_DIR/$BIN_FILE" "artifacts/$ARTIFACT_NAME"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: SHAD3-${{ matrix.os }}_${{ matrix.arch }}
          path: artifacts/*

  publish:
    name: Publish
    needs: [check, test, fmt, clippy, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: cargo install cargo-edit
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | \
            sed 's/version = ".*"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Create and push tag
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag "v${{ steps.get_version.outputs.VERSION }}"
          git push origin "v${{ steps.get_version.outputs.VERSION }}"
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish
      - name: Verify published version
        run: |
          sleep 15
          SEARCH_RESULT=$(cargo search SHAD3 --limit 1)
          PUBLISHED_VERSION=$(echo "$SEARCH_RESULT" | \
            sed -nE 's/^[^"]*"//; s/".*//p')
          if [[ "$PUBLISHED_VERSION" != \
               "${{ steps.get_version.outputs.VERSION }}" ]]; then
            echo "Version mismatch" && exit 1
          fi
      - uses: actions/download-artifact@v4
        with:
          name: SHAD3-${{ matrix.os }}_${{ matrix.arch }}
          path: artifacts
      - run: sudo apt-get install -y gh
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="v${{ steps.get_version.outputs.VERSION }}"
          NOTES="Release $VERSION"
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes "$NOTES" \
            artifacts/*
