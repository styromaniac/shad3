---
name: Rust CI and Publish

on:
 push:
   branches: 
     - main
     - master
   tags:
     - 'v*.*.*'
 pull_request:
   branches:
     - main
     - master
 workflow_dispatch:

env:
 CARGO_TERM_COLOR: always
 RUST_BACKTRACE: 1
 NDK_VERSION: 25c

jobs:
 check:
   name: Check  
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - uses: actions-rs/toolchain@v1
       with:
         profile: minimal
         toolchain: stable
         override: true
     - uses: actions/cache@v4
       with:
         path: |
           ~/.cargo/registry
           ~/.cargo/git
           target
         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
     - uses: actions-rs/cargo@v1
       with:
         command: check

 test:
   name: Test Suite
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - uses: actions-rs/toolchain@v1
       with:
         profile: minimal 
         toolchain: stable
         override: true
     - uses: actions/cache@v4
       with:
         path: |
           ~/.cargo/registry
           ~/.cargo/git
           target
         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
     - uses: actions-rs/cargo@v1
       with:
         command: test

 fmt:
   name: Rustfmt
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - uses: actions-rs/toolchain@v1
       with:
         profile: minimal
         toolchain: stable
         override: true
         components: rustfmt
     - uses: actions-rs/cargo@v1
       with:
         command: fmt
         args: --all -- --emit files 
     - name: Commit and Push Formatting Changes
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         git config --global user.email "github-actions@github.com"
         git config --global user.name "GitHub Actions"
         git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
         git commit -am "Apply rustfmt fixes" || echo "No formatting fixes needed"
         git push origin ${{ github.ref }}

 clippy:
   name: Clippy
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - uses: actions-rs/toolchain@v1
       with:
         profile: minimal
         toolchain: stable
         override: true
         components: clippy
     - uses: actions/cache@v4
       with:
         path: |
           ~/.cargo/registry
           ~/.cargo/git
           target
         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
     - uses: actions-rs/cargo@v1
       with:
         command: clippy
         args: --fix --allow-dirty
     - name: Commit and Push Lint Fixes
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         git config --global user.email "github-actions@github.com"
         git config --global user.name "GitHub Actions"
         git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
         git commit -am "Apply clippy fixes" || echo "No linting fixes needed"
         git push origin ${{ github.ref }}

 build:
   name: Build
   runs-on: ${{ matrix.os }}
   strategy:
     matrix:
       include:
         # Standard Linux builds
         - os: ubuntu-latest
           target: x86_64-unknown-linux-gnu
           artifact_name: shad3-linux_x86_64.tar.gz
         - os: ubuntu-latest
           target: aarch64-unknown-linux-gnu
           artifact_name: shad3-linux_aarch64.tar.gz
           use_cross: true
           
         # macOS builds  
         - os: macos-latest
           target: x86_64-apple-darwin
           artifact_name: shad3-macos_x86_64.tar.gz
         - os: macos-latest
           target: aarch64-apple-darwin
           artifact_name: shad3-macos_aarch64.tar.gz
           
         # Windows builds
         - os: windows-latest
           target: x86_64-pc-windows-msvc
           artifact_name: shad3-windows_x86_64.zip
         - os: windows-latest
           target: aarch64-pc-windows-msvc
           artifact_name: shad3-windows_aarch64.zip
           
         # Termux builds
         - os: ubuntu-latest
           target: x86_64-linux-android
           artifact_name: shad3-termux_x86_64.zip
           android: true
         - os: ubuntu-latest
           target: aarch64-linux-android
           artifact_name: shad3-termux_aarch64.zip
           android: true

   steps:
     - uses: actions/checkout@v4
     
     - name: Install Android NDK
       if: matrix.android
       run: |
         wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
         unzip -q android-ndk-r25c-linux.zip
         NDK_HOME=$PWD/android-ndk-r25c
         echo "ANDROID_NDK_HOME=$NDK_HOME" >> $GITHUB_ENV
         
         # Setup for aarch64
         echo "AR_aarch64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
         echo "CC_aarch64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
         echo "CXX_aarch64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" >> $GITHUB_ENV
         
         # Setup for x86_64
         echo "AR_x86_64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
         echo "CC_x86_64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
         echo "CXX_x86_64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang++" >> $GITHUB_ENV

         # Create symbolic links for traditional names
         mkdir -p $GITHUB_WORKSPACE/bin
         ln -s $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar $GITHUB_WORKSPACE/bin/x86_64-linux-android-ar
         ln -s $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar $GITHUB_WORKSPACE/bin/aarch64-linux-android-ar
         echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

         # Debug output
         echo "Checking symlinks and paths:"
         ls -la $GITHUB_WORKSPACE/bin/
         echo "PATH=$PATH"
         
     - name: Setup Cargo Config
       if: matrix.android
       run: |
         mkdir -p .cargo
         cat > .cargo/config.toml << EOF
         [target.aarch64-linux-android]
         ar = "aarch64-linux-android-ar"
         linker = "$PWD/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
         
         [target.x86_64-linux-android]
         ar = "x86_64-linux-android-ar"
         linker = "$PWD/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
         EOF

         # Debug output
         echo "Cargo config contents:"
         cat .cargo/config.toml
         
     - name: Setup Rust toolchain
       uses: actions-rs/toolchain@v1
       with:
         toolchain: stable
         target: ${{ matrix.target }}
         override: true
         
     - uses: actions/cache@v4
       with:
         path: |
           ~/.cargo/registry
           ~/.cargo/git
           target
         key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
         
     - name: Build Binary
       uses: actions-rs/cargo@v1
       with:
         use-cross: ${{ matrix.use_cross || false }}
         command: build
         args: --release --target ${{ matrix.target }} --bin shad3
         
     - name: Prepare artifacts
       shell: bash
       run: |
         mkdir -p artifacts
         cd target/${{ matrix.target }}/release
         
         if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
           cp shad3.exe ../../artifacts/shad3.exe
           cd ../../artifacts
           7z a ${{ matrix.artifact_name }} shad3.exe
         else
           cp shad3 ../../artifacts/shad3
           cd ../../artifacts
           if [[ "${{ matrix.artifact_name }}" == *.zip ]]; then
             zip ${{ matrix.artifact_name }} shad3
           else
             tar czf ${{ matrix.artifact_name }} shad3
           fi
         fi
         
     - name: Upload artifacts
       uses: actions/upload-artifact@v4
       with:
         name: ${{ matrix.target }}
         path: artifacts/${{ matrix.artifact_name }}

 version-bump:
   name: Version Bump
   runs-on: ubuntu-latest
   needs: [fmt, clippy]
   if: github.ref == 'refs/heads/main'
   steps:
     - uses: actions/checkout@v4
       with:
         fetch-depth: 0
     - name: Increment Patch Version
       id: bump_version
       run: |
         if [[ $(grep '^version = ' Cargo.toml) =~ version\ =\ \"([0-9]+)\.([0-9]+)\.([0-9]+)\" ]]; then
           MAJOR=${BASH_REMATCH[1]}
           MINOR=${BASH_REMATCH[2]}
           PATCH=${BASH_REMATCH[3]}
           NEW_PATCH=$((PATCH + 1))
           NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
           sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
           echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
         else
           echo "Version pattern not found" && exit 1
         fi
     - name: Commit Version Bump
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         git config --global user.email "github-actions@github.com"
         git config --global user.name "GitHub Actions"
         git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
         git add Cargo.toml
         git commit -m "Bump version to ${{ env.NEW_VERSION }}"
         git push origin main

 publish:
   name: Publish
   needs: [check, test, fmt, clippy, build, version-bump]
   runs-on: ubuntu-latest
   permissions:
     contents: write
   if: github.ref == 'refs/heads/main'
   steps:
     - uses: actions/checkout@v4
       with:
         fetch-depth: 0
         
     - uses: actions-rs/toolchain@v1
       with:
         profile: minimal
         toolchain: stable
         override: true
         
     - run: cargo install cargo-edit
     
     - name: Get current version
       id: version
       run: |
         VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
         echo "VERSION=${VERSION}" >> $GITHUB_ENV
         
     - name: Create and push tag
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         git config --global user.email "github-actions@github.com"
         git config --global user.name "GitHub Actions"
         git tag "v${VERSION}"
         git push origin "v${VERSION}"
         
     - name: Publish to crates.io
       env:
         CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
       run: cargo publish
       
     - name: Verify published version
       run: |
         sleep 15
         SEARCH_RESULT=$(cargo search shad3 --limit 1)
         PUBLISHED_VERSION=$(echo "$SEARCH_RESULT" | sed -nE 's/^[^"]*"//; s/".*//p')
         if [[ "$PUBLISHED_VERSION" != "${VERSION}" ]]; then
           echo "Version mismatch" && exit 1
         fi
         
     - name: Download artifacts
       uses: actions/download-artifact@v4
       with:
         pattern: "*-unknown-*"
         path: artifacts
         merge-multiple: true
         
     - name: Create GitHub Release
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         gh release create "v${VERSION}" \
           --title "Release v${VERSION}" \
           --notes "Release v${VERSION}" \
           artifacts/*.tar.gz artifacts/*.zip
