name: Rust CI for Android, GNU/Linux, MacOS, and Windows

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NDK_VERSION: "25.2.9519653"

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        version=$(grep '^version =' Cargo.toml | cut -d '"' -f2)
        echo "version=$version" >> $GITHUB_OUTPUT

  create-tag:
    needs: extract-version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Create and push tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a v${{ needs.extract-version.outputs.version }} -m "Release v${{ needs.extract-version.outputs.version }}"
        git push origin v${{ needs.extract-version.outputs.version }}

  android-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android NDK
      run: |
        sdkmanager --install "ndk;${{ env.NDK_VERSION }}"
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV

    - name: Setup NDK toolchain
      run: |
        echo "$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
        echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android23-clang" >> $GITHUB_ENV
        echo "CC_aarch64_linux_android=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android23-clang" >> $GITHUB_ENV
        echo "CXX_aarch64_linux_android=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android23-clang++" >> $GITHUB_ENV
        echo "AR_aarch64_linux_android=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-android-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Clippy
      run: cargo clippy --target aarch64-linux-android -- -D warnings

    - name: Check (Debug)
      env:
        CFLAGS: "-I$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
      run: cargo check --target aarch64-linux-android

    - name: Build (Release)
      env:
        CFLAGS: "-I$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
      run: cargo build --target aarch64-linux-android --release

    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aarch64-linux-android-build
        path: target/aarch64-linux-android/release/shad3

  linux-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-linux-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Clippy
      run: cargo clippy -- -D warnings

    - name: Check (Debug)
      run: cargo check

    - name: Build (Release)
      run: cargo build --release

    - name: Run tests
      run: cargo test --release

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: target/release/shad3

  macos-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-macos-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Clippy
      run: cargo clippy -- -D warnings

    - name: Check (Debug)
      run: cargo check

    - name: Build (Release)
      run: cargo build --release

    - name: Run tests
      run: cargo test --release

    - name: Upload MacOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: target/release/shad3

  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-windows-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Clippy
      run: cargo clippy -- -D warnings

    - name: Check (Debug)
      run: cargo check

    - name: Build (Release)
      run: cargo build --release

    - name: Run tests
      run: cargo test --release

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: target\release\shad3.exe

  release:
    needs: [create-tag, extract-version, android-build, linux-build, macos-build, windows-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.extract-version.outputs.version }}
          release_name: Release v${{ needs.extract-version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Android Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/aarch64-linux-android-build/shad3
          asset_name: shad3-android-aarch64
          asset_content_type: application/octet-stream

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-build/shad3
          asset_name: shad3-linux-x86_64
          asset_content_type: application/octet-stream

      - name: Upload MacOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-build/shad3
          asset_name: shad3-macos-x86_64
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-build/shad3.exe
          asset_name: shad3-windows-x86_64.exe
          asset_content_type: application/octet-stream
