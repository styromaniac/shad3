name: Rust CI and Publish

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  linux-x86_64-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target x86_64-unknown-linux-gnu
    - name: Upload Linux x86_64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-x86_64-build
        path: target/x86_64-unknown-linux-gnu/release/shad3

  linux-aarch64-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-unknown-linux-gnu
        override: true
    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target aarch64-unknown-linux-gnu
    - name: Upload Linux aarch64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-aarch64-build
        path: target/aarch64-unknown-linux-gnu/release/shad3

  macos-x86_64-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-apple-darwin
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target x86_64-apple-darwin
    - name: Upload macOS x86_64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-x86_64-build
        path: target/x86_64-apple-darwin/release/shad3

  macos-aarch64-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target aarch64-apple-darwin
    - name: Upload macOS aarch64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-aarch64-build
        path: target/aarch64-apple-darwin/release/shad3

  windows-x86_64-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target x86_64-pc-windows-msvc
    - name: Upload Windows x86_64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-x86_64-build
        path: target\x86_64-pc-windows-msvc\release\shad3.exe

  windows-aarch64-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-pc-windows-msvc
        override: true
    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target aarch64-pc-windows-msvc
    - name: Upload Windows aarch64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-aarch64-build
        path: target\aarch64-pc-windows-msvc\release\shad3.exe

  publish:
    name: Publish to crates.io
    needs: [check, test, fmt, clippy, linux-x86_64-build, linux-aarch64-build, macos-x86_64-build, macos-aarch64-build, windows-x86_64-build, windows-aarch64-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install cargo-edit
        run: cargo install cargo-edit
      - name: Setup Git user
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Check if should publish
        id: should_publish
        run: |
          if [[ ${{ github.event_name }} == 'push' && ${{ startsWith(github.ref, 'refs/tags/') }} == 'true' ]]; then
            echo "Should publish: yes"
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "Should publish: no"
            echo "Event: ${{ github.event_name }}"
            echo "Ref: ${{ github.ref }}"
            echo "publish=false" >> $GITHUB_OUTPUT
          fi
      - name: Get version from tag
        if: steps.should_publish.outputs.publish == 'true'
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Update version in Cargo.toml
        if: steps.should_publish.outputs.publish == 'true'
        run: cargo set-version ${{ steps.get_version.outputs.VERSION }}
      - name: Dry run publish
        if: steps.should_publish.outputs.publish == 'true'
        run: cargo publish --dry-run
      - name: Publish to crates.io
        if: steps.should_publish.outputs.publish == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cargo publish || { echo "Publishing failed"; exit 1; }
      - name: Verify published version
        if: steps.should_publish.outputs.publish == 'true'
        run: |
          sleep 15  # Wait for crates.io to update
          PUBLISHED_VERSION=$(cargo search shad3 --limit 1 | sed -nE 's/^[^"]*"//; s/".*//p')
          if [ "$PUBLISHED_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
            echo "Published version $PUBLISHED_VERSION does not match tag version ${{ steps.get_version.outputs.VERSION }}"
            exit 1
          else
            echo "Successfully published version $PUBLISHED_VERSION to crates.io"
          fi
