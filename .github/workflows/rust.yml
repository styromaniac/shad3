---
name: Rust CI and Publish

on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/**'
  pull_request:
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**.rs'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NDK_VERSION: 25c

jobs:
  check:
    name: Check  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: shad3-linux_x86_64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: shad3-linux_aarch64.tar.gz
            use_cross: true

          # macOS builds  
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: shad3-macos_x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: shad3-macos_aarch64.tar.gz
            
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: shad3-windows_x86_64.zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: shad3-windows_aarch64.zip
            
          # Termux builds
          - os: ubuntu-latest
            target: x86_64-linux-android
            artifact_name: shad3-termux_x86_64.zip
            android: true
          - os: ubuntu-latest
            target: aarch64-linux-android
            artifact_name: shad3-termux_aarch64.zip
            android: true

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Android NDK
        if: matrix.android
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          unzip -q android-ndk-r25c-linux.zip
          NDK_HOME=$PWD/android-ndk-r25c
          echo "ANDROID_NDK_HOME=$NDK_HOME" >> $GITHUB_ENV
          
          mkdir -p $GITHUB_WORKSPACE/bin
          ln -s $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar $GITHUB_WORKSPACE/bin/x86_64-linux-android-ar
          ln -s $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar $GITHUB_WORKSPACE/bin/aarch64-linux-android-ar
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

          echo "AR_aarch64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CC_aarch64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "AR_x86_64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CC_x86_64_linux_android=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
          
      - name: Setup Cargo Config
        if: matrix.android
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.aarch64-linux-android]
          ar = "aarch64-linux-android-ar"
          linker = "$PWD/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          
          [target.x86_64-linux-android]
          ar = "x86_64-linux-android-ar"
          linker = "$PWD/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
          EOF
          
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          
      - name: Build Binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use_cross || false }}
          command: build
          args: --release --target ${{ matrix.target }} --bin shad3

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/shad3.exe artifacts/
            cd artifacts
            7z a ${{ matrix.artifact_name }} shad3.exe
          else
            cp target/${{ matrix.target }}/release/shad3 artifacts/
            cd artifacts
            if [[ "${{ matrix.artifact_name }}" == *.zip ]]; then
              zip ${{ matrix.artifact_name }} shad3
            else
              tar czf ${{ matrix.artifact_name }} shad3
            fi
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: artifacts/${{ matrix.artifact_name }}

  publish:
    name: Publish
    needs: [check, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: artifacts
          merge-multiple: true
          
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "Release v${VERSION}" \
            artifacts/*.tar.gz artifacts/*.zip
