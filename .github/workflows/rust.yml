name: Rust CI for Android, GNU/Linux, MacOS, and Windows

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NDK_VERSION: "25.2.9519653"

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        version=$(grep '^version =' Cargo.toml | cut -d '"' -f2)
        echo "Extracted version: $version"
        echo "version=$version" >> $GITHUB_OUTPUT

  create-tag:
    needs: extract-version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Create and push tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        echo "Extracted version: ${{ needs.extract-version.outputs.version }}"
        git tag -a v${{ needs.extract-version.outputs.version }} -m "Release v${{ needs.extract-version.outputs.version }}"
        git push origin v${{ needs.extract-version.outputs.version }}

  build:
    needs: [extract-version]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: shad3
            asset_name: shad3-linux-x86_64
          - os: macos-latest
            artifact_name: shad3
            asset_name: shad3-macos-x86_64
          - os: windows-latest
            artifact_name: shad3.exe
            asset_name: shad3-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    - name: Check formatting
      run: cargo fmt -- --check
    - name: Clippy
      run: cargo clippy -- -D warnings
    - name: Build
      run: cargo build --release
    - name: Run tests
      run: cargo test --release
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/release/${{ matrix.artifact_name }}

  android-build:
    needs: [extract-version]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Setup Android SDK and NDK
      run: |
        sdkmanager --install "ndk;${{ env.NDK_VERSION }}"
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android
    - name: Build for Android
      run: |
        export PATH="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
        export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android23-clang
        cargo build --target aarch64-linux-android --release
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: shad3-android-aarch64
        path: target/aarch64-linux-android/release/shad3

  release:
    needs: [create-tag, extract-version, build, android-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for asset in shad3-*; do
          asset_name=$(basename $asset)
          asset_path=./$asset/$asset_name
          if [ -f "$asset_path" ]; then
            curl -H "Authorization: token $GITHUB_TOKEN" \
                 -H "Content-Type: application/octet-stream" \
                 --data-binary @"$asset_path" \
                 "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$asset_name"
          else
            echo "Asset not found: $asset_path"
          fi
        done
