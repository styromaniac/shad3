name: Cross-Compile Rust Project

on:
  push:
    branches: [main]  # Trigger on any push to the main branch
  pull_request:
    branches: [main]  # Trigger on pull requests to the main branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        target: 
          # Linux Targets
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          # Windows Targets
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
          # macOS and iOS Targets
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - aarch64-apple-ios
          - x86_64-apple-ios
          # Android Targets
          - aarch64-linux-android
          - x86_64-linux-android
          # WebAssembly
          - wasm32-wasi

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev gcc-multilib

    - name: Install iOS Targets
      if: matrix.os == 'macos-latest'
      run: |
        rustup target add aarch64-apple-ios
        rustup target add x86_64-apple-ios

    - name: Set OpenSSL Environment Variables
      if: matrix.os == 'ubuntu-latest' && 
          (matrix.target == 'x86_64-unknown-linux-gnu' || 
           matrix.target == 'aarch64-unknown-linux-gnu' || 
           matrix.target == 'x86_64-unknown-linux-musl' || 
           matrix.target == 'aarch64-unknown-linux-musl')
      run: |
        export OPENSSL_DIR=/usr
        export OPENSSL_LIB_DIR=$OPENSSL_DIR/lib
        export OPENSSL_INCLUDE_DIR=$OPENSSL_DIR/include
        export PKG_CONFIG_PATH=$OPENSSL_DIR/lib/pkgconfig

    - name: Install Rust Toolchain for Windows
      if: matrix.os == 'windows-latest'
      run: rustup target add ${{ matrix.target }}

    - name: Install Cross (for cross-compiling)
      run: cargo install cross

    - name: Build with Cross
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ] || [ "${{ matrix.os }}" = "windows-latest" ]; then
          cargo build --release --target ${{ matrix.target }}
        else
          cross build --release --target ${{ matrix.target }}
        fi

    - name: Upload Binaries
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.target }}-binaries
        path: target/${{ matrix.target }}/release/
